{"version":3,"sources":["App.tsx","index.tsx"],"names":["parseQuery","console","log","queryString","window","location","search","slice","box","content","split","Error","fileToDataUrl","file","Promise","resolve","rejects","reader","FileReader","readAsDataURL","onloadend","e","result","onerror","App","useState","borgClient","setBorgClient","images","setImages","connected","setConnected","serverId","setServerId","message","show","error","setError","showError","connect","a","startBorg","createClient","getNode","connectionManager","on","connection","remotePeer","toB58String","setTimeout","useEffect","temp","all","map","value","prevState","loading","imageUri","receiveFile","data","data1","className","type","color","height","width","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42f3e940.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Loader from \"react-loader-spinner\";\nimport './App.css'\nimport {Borg, createClient} from '@functionland/borg'\nimport * as queryString from 'querystring'\n\nconst parseQuery = () => {\n    console.log(queryString.parse(window.location.search.slice(1)))\n    const {box, content} = queryString.parse(window.location.search.slice(1))\n    if (box && content) {\n        const contentArr = (content as string).split(',')\n        return {box, content:contentArr}\n    } else {\n        throw Error(\"url has problem\")\n    }\n}\n\nconst fileToDataUrl = (file: File) => {\n    return new Promise<string>((resolve, rejects) => {\n        let reader = new FileReader()\n        reader.readAsDataURL(file)\n        // @ts-ignore\n        reader.onloadend = (e) => resolve(reader.result)\n        reader.onerror = () => rejects\n    })\n}\n\nfunction App() {\n    const [borgClient, setBorgClient] = useState<Borg>()\n    const [images, setImages] = useState<{ loading: boolean, imageUri: string }[]>([])\n    const [connected, setConnected] = useState(false)\n    const [serverId, setServerId] = useState('')\n    const [error, setError] = useState<{ message: string, show: boolean }>({message: \"\", show: false})\n\n    const showError = (message: string) => {\n        setError({message, show: true})\n    }\n\n    const connect = async () => {\n        if (!borgClient) {\n            console.log('borg not connected')\n            return\n        }\n        try {\n            await borgClient.connect(serverId)\n        } catch (e) {\n            showError((e as Error).message)\n        }\n\n    }\n\n    async function startBorg() {\n        const borgClient = await createClient()\n        const node = borgClient.getNode()\n        node.connectionManager.on('peer:disconnect', async (connection: { remotePeer: { toB58String: () => any; }; }) => {\n            if (connection.remotePeer.toB58String() === serverId) {\n                setConnected(false)\n                setTimeout(() => {\n                    if (serverId) {\n                        connect()\n                    }\n                }, 1000)\n            }\n        })\n        return borgClient\n    }\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const {box, content} = parseQuery()\n                const temp = await startBorg()\n                setBorgClient(temp)\n\n                if (typeof box === \"string\") {\n                    setServerId(box)\n                    setConnected(await temp.connect(box))\n                }\n                const data = await Promise.all(content.map(value => {\n                    setImages((prevState => [...prevState, {loading: true, imageUri: \"\"}]))\n                    return temp.receiveFile(value)\n                }))\n                const data1 = await Promise.all(data.map(async (value) => {\n                    return {loading: false, imageUri: await fileToDataUrl(value)}\n                }))\n                setImages(data1)\n                // @ts-ignore\n                // const newdata =\n                console.log(data1)\n            } catch (e) {\n                showError((e as Error).message)\n            }\n\n        })()\n\n    }, [])\n\n    return (\n        <div className='App'>\n            <div className='Container'>\n                {error.show ? <p>{error.message}</p> : \"\"}\n                {!error.show && !connected ? <Loader type=\"Puff\" color=\"#00BFFF\" height={80} width={80}/> : \"\"}\n                <div className='ImageContainer'>\n                {!error.show && connected ? images.map(\n                    value => value.loading ? <Loader type=\"Puff\" color=\"#00BFFF\" height={80} width={80}/> :\n\n                            <img className='Image' src={value.imageUri} alt={\"not ready\"}/>\n\n                ) : \"\"}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}